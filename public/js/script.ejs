<script type="text/javascript">
    //  Initial values
    var valueBTC = valueETH = valueYODA = 0,
        summBTCA = summETHA = summYODAA = 0, 
        summBTCA = summETHA = summYODAA = 0,
        summBTCB = summETHB = summYODAB = 0,
        summBTCP = summETHP = summYODAP = 0,
        ethPriceBTC = ethPriceUSD = YODAPrice = 0,
        nStr = stepN = orderID = 0,
        myError = "",
        timeNow = "";

    function nextStep() {
        stepN = stepN + 1;
        document.getElementById('ind').value = stepN;
        if (stepN == 1) {
            showMess("Smart contract DEx: startDEx in progress");
            document.getElementById('bobStatus').innerText = "Filling order: smart contract DEx in progress";
            document.getElementById('aliceStatus').innerText = "Filling order: smart contract DEx in progress";
            startDEx();
        } else if (stepN == 2) {
            var ff = semafor(1, 0, 0);
            showMess('Alice makes pledge Tx in YODAs');
            makeYODATX('alice','plazmoid', valueYODA);
        } else if (stepN == 3) {
            var ff = semafor(0, 1, 0);
            showMess('Bob makes pledge Tx in YODAs');
            makeYODATX('bob', 'plazmoid', valueYODA);
        } else if (stepN == 4) {
            showBalances();
            showMess('Smart contract DEx: inDepo in progress');
            callDExIn();
        } else if (stepN == 5) {
            var ff = semafor(1, 1, 0);
            showMess('Alice & Bob make two atomic swap Tx');
            atomicSwap();
        } else if (stepN == 6) {
            var ff = semafor(0, 0, 1);
            showBalances();
            document.getElementById('aliceStatus').innerText = "Alice received " + valueETH.toFixed(3) + " ETH";
            showMess("Atomic swap BTC/ETH in progress, waiting for BTC Tx confirmation");
        } else if (stepN == 7) {
            var ff = semafor(0, 0, 1);
            showBalances();
            showMess('Atomic swap is finished. Plazmoid makes Tx to cancel pledges');
            document.getElementById('bobStatus').innerText = "Bob received " + valueBTC.toFixed(6) + " BTC";
            makeYODATX("plazmoid", "alice", valueYODA);
            showMess('Plazmoid sends ' + valueYODA.toFixed(3) + ' YODAs to Alice');
        } else if (stepN == 8) {
            showMess("Plazmoid makes Tx to cancel Bobs pledge");
            makeYODATX("plazmoid", "bob", valueYODA);
            showMess('Plazmoid sends ' + valueYODA.toFixed(3) + ' YODAs to Bob');
        } else if (stepN == 9) {
            showMess('Smart contract DEx: outDepo in progress');
            callDExOut();
        } else if (stepN == 10) {
            clearInterval(userActiveCheck);
            myUser = "dembel";
            var ff = semafor(0, 0, 0);
            flaf = false;
            showBalances();
            showMess("Atomic swap BTC/ETH finished successfully!");
        }
    };

    //  YODA functions  

    function startDEx() {
        if (isYODAApi) {
            showMess('Smart contract DEx: form and send startDEx Tx');
            var jsonData = JSON.stringify({ valueA: valueBTC, valueB: valueETH, valueY: valueYODA})
            $.get(hostYODAApi + 'startDEX/' + jsonData)
                .then(function(d) {
                    showMess('Smart contract DEx: startDEx Tx is successful');
                    orderID = orderID + 1;
                    console.log('Order ' + orderID + ', Tx hash ' + d.hash);
                    $.get(hostYODAApi + 'waitTx/' + d.hash)
                        .then(function(h) {
                        showMess('Smart contract DEx: startDex Tx is confirmed');
                        console.log('in Youdex block N ' + h.block);
                        nextStep();
                        })
                        .fail(function(err) {
                            console.log(err.status + err.responseText)
                        })
                })
                .fail(function(err) {
                    console.log(err.status + err.responseText)
                })

        }
     else {
        }
    }

    function makeYODATX(from, to, summ) {
        if (isYODAApi) {
            var jsonData = JSON.stringify({ from: from, to: to, valueY: summ})
            $.get(hostYODAApi + 'tokenTX/' + jsonData)
                .then(function(d) {
                    showMess("Transfer " + from + "'s" + " YODAs Tx is successful");
                    console.log('hash Tx=' + d.hash);
                    $.get(hostYODAApi + 'waitTx/' + d.hash)
                        .then(function(h) {
                        showMess('Transfer YODA Tx is confirmed');
                        console.log('in Youdex block N ' + h.block);
                        nextStep();
                        })
                        .fail(function(err) {
                            console.log(err.status + err.responseText)
                        })
                })
                .fail(function(err) {
                    console.log(err.status + err.responseText)
                })

        }
     else {
        }
 
    }

    function callDExIn() {
        if (isYODAApi) {
            showMess('Smart contract DEx: form and send inDepo Tx');
            var jsonData = JSON.stringify({ order: orderID})
            $.get(hostYODAApi + 'inDepo/' + jsonData)
                .then(function(d) {
                    showMess('Smart contract DEx: inDepo Tx is successful');
                    console.log('order=' + orderID + 'hash Tx=' + d.hash);
                    $.get(hostYODAApi + 'waitTx/' + d.hash)
                        .then(function(h) {
                        showMess('Smart contract DEx: inDepo Tx is confirmed');
                        console.log('in Youdex block N ' + h.block);
                        nextStep();
                        })
                        .fail(function(err) {
                            console.log(err.status + err.responseText)
                        })
                })
                .fail(function(err) {
                    console.log(err.status + err.responseText)
                })

        }
     else {
        }
    }

    //  Atomic swap function
    function atomicSwap() {
    //  Alice's BTC transfer        
        if (isBtcApi && isEthApi) {
            showMess('Alice send ' + valueBTC.toFixed(6) + 'BTC to Bob Tx to Bitcoin');
            var jsonData = JSON.stringify({ from: 'alice', to: 'bob', value: valueBTC * 10 ** 8})
            $.get(hostBtcApi + 'makeTx/' + jsonData)
                .then(function(d) {
                    if (!d.error) {
                    showMess("BTC Tx is successful. Checking Bitcoin confirmation");
//                     console.log('https://live.blockcypher.com/btc/tx/' + d.hash + '/');  //  main net
                    console.log('https://live.blockcypher.com/btc-testnet/tx/' + d.hash + '/'); //  testnet
                    document.getElementById('bobStatus').innerText = valueBTC.toFixed(6) + "BTC Tx received at " + d.time;
                    var ff = semafor(3, 0, 1);
                    }
                    else {
                        myError = error;
                        console.log('BTC makeTx error: host not response!');
                    isApi = false;
                    }
//  return;     for bitcoin transaction test only
                    waitConfirmBtc(d.hash);
               })
                .fail(function(err) {
                    console.log(err.status + err.responseText)
                })
    //  Bob's ETH transfer
    return;
            showMess('Bob send ' + valueETH.toFixed(3) + 'ETH Tx to Ethereum');
            var jsonData = JSON.stringify({ from: 'bob', to: 'alice', value: valueETH * 10 ** 18});
            $.get(hostEthApi + 'makeTx/' + jsonData)
                .then(function(d) {
                    showMess("ETH Tx is successful. Checking Ethereum confirmation");
                    console.log('ETH Tx hash ' + d.hash);
                    var ff = semafor(0, 3, 1);
                    $.get(hostEthApi + 'waitTx/' + d.hash)
                        .then(function(h) {
                        showMess('ETH Tx is confirmed in block ' +  h.block);
                        nextStep();
                        })
                        .fail(function(err) {
                            console.log(err.status + err.responseText);
                        })
               })
                .fail(function(err) {
                    console.log(err.status + err.responseText);
                })
        }          
    }

    function callDExOut() {
        if (isYODAApi) {
            showMess('Smart contract DEx: form and send outDepo Tx');
            const jsonData = JSON.stringify({ order: orderID});
            $.get(hostYODAApi + 'outDepo/' + jsonData)
                .then(function(d) {
                    showMess('Smart contract DEx: outDepo Tx is successful');
                    console.log('order=' + orderID + 'hash Tx=' + d.hash);
                    $.get(hostYODAApi + 'waitTx/' + d.hash)
                        .then(function(h) {
                        showMess('Smart contract DEx: outDepo Tx is confirmed');
                        console.log('in Youdex block N ' + h.block);
                        nextStep();
                        })
                        .fail(function(err) {
                            console.log(err.status + err.responseText)
                        })
                })
                .fail(function(err) {
                    console.log(err.status + err.responseText)
                })

        }
     else {
        }
     }

    function waitConfirmBtc(hash) {
        var interval;
        var timeOut = setTimeout(function() {
            clearInterval(interval);
            showMess('Error while mining BTC Tx in next 30 minuts');
        }, 1800000);
        interval = setInterval(function() {
            $.get(hostBtc + '/txs/' + hash)
                .done(function(tx) {
                    if (tx.confirmations > 0) {
                        showMess('BTC Tx is confirmed in block ' + tx.block_height.toString());
                        clearTimeout(timeOut);
                        clearInterval(interval);
                        nextStep();
                    } //else //console.log(tx)
                })
                .fail(function(err) {
                    showMess('Error while mining BTC Tx: ' + err);
                })
        }, 30000);
    }

</script>